import json
import os
import tracemalloc

import telegram
from dotenv import load_dotenv
from payment.models import (ApprovalStatus, ApprovedFunction, CashPayment,
                            Payers, Payments, PayWithCard,
                            PayWithCheckingAccount, TelegramMessageActions,
                            TransferToCard)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram_working.assistance import save_message_function

tracemalloc.start()


load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

bot = telegram.Bot(token=TELEGRAM_TOKEN)


def message_constructor(user, creator_user, payment_id, payment, payment_method, pay_with_method, comment_text: str, comment_username: str):
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ"""
    payment = Payments.objects.get(id=payment_id)
    add_urgent_message = ''
    add_payment_file_message = ''
    file_path = ''
    if payment.urgent_payment == True:
        add_urgent_message = 'üî•*–°–†–û–ß–ù–û!*\n'
    if payment.send_payment_file == True:
        add_payment_file_message = '*‚ÄºÔ∏è–ù–£–ñ–ù–ê –ü–õ–ê–¢–ï–ñ–ö–ê / –ß–ï–ö*\n'
    message =add_urgent_message +  add_payment_file_message + f'''
            *{payment.project.name}* - *{payment.category.name}*
            –ó–∞ —á—Ç–æ: {payment.comment}
            –°—É–º–º–∞: {payment.payment_sum}
            –ö–æ–º—É: {payment.contractor_name}
            –°–ø–æ—Å–æ–±: *{payment.payment_method.method_name}* 
        '''
    
    if payment_method == 1:
        file_path = f'http://5.9.57.39/media/{pay_with_method.file_of_bill}'
    elif payment_method == 2:
        message = message + f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç—ë–∂: *{pay_with_method.link_to_payment}*"
    elif payment_method == 3:
        message = message + f'''–ö–∞—Ä—Ç–∞: *{pay_with_method.card_number}*
        –¢–µ–ª–µ—Ñ–æ–Ω: *{pay_with_method.phone_number}*
        –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ –±–∞–Ω–∫—É: *{pay_with_method.payment_receiver}*
        –ë–∞–Ω–∫: *{pay_with_method.bank_for_payment}*
        '''
    elif payment_method == 4:
        message = message + f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: *{pay_with_method.cash_payment_payment_data}*"

    if comment_text:
        short_name_dict = {
            '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –õ–∏—Å–æ–≤': '–ê.–õ.',
            '–Æ—Ä–∏–π –õ–∏—Å–æ–≤': '–Æ.–õ.'
        }
        comment_user = ApprovedFunction.objects.get(
            user_name=comment_username)
        name = f'{comment_user.first_name} {comment_user.last_name}'
        message = message + f"""\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {short_name_dict[name]}: _{comment_text}_\n"""

    payment_status = ''
    if payment.status_of_payment == '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏' or payment.status_of_payment == '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ –õ–∏—Å–æ–≤ –Æ—Ä–∏–π':
        payment_status = 'üïê –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ'
    elif payment.status_of_payment == '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ –õ–∏—Å–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä':
        payment_status = 'üí≤–û–ø–ª–∞—Ç–∞'
    elif payment.status_of_payment == '–û–ø–ª–∞—á–µ–Ω–æ':
        payment_status = '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ'
    elif '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ' in payment.status_of_payment:
        payment_status = '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
    message = message + f"""\n–°—Ç–∞—Ç—É—Å:  {payment_status}"""
    
    message = message.replace('            ', '').replace('        ', '')
    return message


def approve_process(payment_id: int, payment_creator: str, creator_user_rating: int, comment_text: str, comment_username: str):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏.

    payment_id: id –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É.
    payment_creator: —Å–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞—è–≤–∫–∏. –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è user_name –º–æ–¥–µ–ª–∏ ApprovedFunction
    comment_text: —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–ª –∑–∞—è–≤–∫—É
    –∏ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
    comment_username: username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
    –ò–∑ –º–æ–¥–µ–ª–∏ ApprovedFunction –±–µ—Ä–µ—Ç—Å—è –ø–æ–ª–µ user_name
    """
    users = ApprovedFunction.objects.all()
    creator_user = ApprovedFunction.objects.get(
        user_name=payment_creator)
    payment = Payments.objects.get(id=payment_id)
    
    rating_all_users = ApprovedFunction.objects.all(
    ).values_list('rating_for_approval', flat=True)
    
    if creator_user_rating <= 10:
        if creator_user_rating in rating_all_users and creator_user_rating > 0:
            for user in users:
                if user.rating_for_approval == creator_user_rating:
                    keyboard = [[InlineKeyboardButton("–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å", callback_data=f'–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å {payment_id} {user} {payment_creator}'),
                        InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'–û—Ç–∫–ª–æ–Ω–∏—Ç—å {payment_id} {user} {payment_creator}'),
                        InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω–æ", callback_data=f'–û–ø–ª–∞—Ç–∏—Ç—å {payment_id} {user} {payment_creator}')]]

                    reply_markup = InlineKeyboardMarkup(keyboard)

                    if payment.payment_method.pk == 1:
                        pay_with_method = PayWithCheckingAccount.objects.get(payment_id=payment.pk)
                    elif payment.payment_method.pk == 2:
                        pay_with_method = PayWithCard.objects.get(payment_id=payment.pk)
                    elif payment.payment_method.pk == 3:
                        pay_with_method = TransferToCard.objects.get(payment_id=payment.pk)
                    elif payment.payment_method.pk == 4:
                        pay_with_method = CashPayment.objects.get(payment_id=payment.pk)

                    message = message_constructor(user, creator_user, payment_id, payment, payment.payment_method.pk, pay_with_method, comment_text, comment_username)
                    if payment.payment_method.pk == 1:
                        #file_path = f'http://5.9.57.39/media/{pay_with_method.file_of_bill}'
                        file_path = os.path.join(os.getcwd(), 'media/' f'{pay_with_method.file_of_bill}')
                        with open(file_path, 'rb') as f:
                            message_obj = bot.send_document(chat_id=int(user.chat_id_tg),
                                document=f,
                                reply_markup=reply_markup,
                                caption=message,
                                parse_mode='Markdown')
                            save_message_function(payment, user.chat_id_tg,
                                message_obj.message_id, 'create_approve',
                                user.user_name, message, reply_markup, True)
                    else:
                        message_obj = bot.send_message(
                            chat_id=int(user.chat_id_tg),
                            text=message,
                            reply_markup=reply_markup,
                            parse_mode='Markdown')
                        save_message_function(payment, user.chat_id_tg,
                            message_obj.message_id, 'create_approve',
                            user.user_name, message, reply_markup, False)
                    break
        else:
            approve_process(payment_id, payment_creator, (creator_user_rating+1), comment_text, comment_username)

def send_message_to_creator(payment_id, payment_creator, creator_user_rating):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Å —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–æ–π"""
    payment = Payments.objects.get(id=payment_id)
    creator = ApprovedFunction.objects.get(user_name=payment_creator)
    if creator_user_rating == 0:
        if payment.payment_method.pk == 1:
            pay_with_method = PayWithCheckingAccount.objects.get(payment_id=payment.pk)
        elif payment.payment_method.pk == 2:
            pay_with_method = PayWithCard.objects.get(payment_id=payment.pk)
        elif payment.payment_method.pk == 3:
            pay_with_method = TransferToCard.objects.get(payment_id=payment.pk)
        elif payment.payment_method.pk == 4:
            pay_with_method = CashPayment.objects.get(payment_id=payment.pk)

        message = message_constructor(payment_creator, payment_creator, payment_id, payment, payment.payment_method.pk, pay_with_method, '', '')
        keyboard = [[InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'–û—Ç–∫–ª–æ–Ω–∏—Ç—å {payment_id} {creator} {payment_creator}')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if payment.payment_method.pk == 1:
            file_path = os.path.join(os.getcwd(), 'media/' f'{pay_with_method.file_of_bill}')
            with open(file_path, 'rb') as f:
                message_obj = bot.send_document(
                    chat_id=int(creator.chat_id_tg),
                    document=f,
                    reply_markup=reply_markup,
                    caption=message,
                    parse_mode='Markdown')
                save_message_function(payment, creator.chat_id_tg,
                    message_obj.message_id, 'create_approve',
                    creator.user_name, message, reply_markup, True)
        else:
            message_obj = bot.send_message(
                chat_id=int(creator.chat_id_tg),
                text=message,
                reply_markup=reply_markup,
                parse_mode='Markdown')
            save_message_function(payment, creator.chat_id_tg,
                message_obj.message_id, 'create_approve',
                creator.user_name, message, reply_markup, False)
    start_tg_working(payment_id, payment_creator, creator_user_rating, '', '')


def start_tg_working(payment_id: int, payment_creator: str, creator_user_rating: int, comment_text: str, comment_username: str):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è.
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏, –µ—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è = 10.
    –ò–ª–∏ –∑–∞—è–≤–∫—É —Å–æ–∑–¥–∞–ª –±—É—Ö–≥–∞–ª—Ç–µ—Ä

    payment_id: id –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É.
    payment_creator: —Å–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞—è–≤–∫–∏. –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è user_name –º–æ–¥–µ–ª–∏ ApprovedFunction
    creator_user_rating: —Ä–µ–π—Ç–∏–Ω–≥ —Å–æ–≥–ª–∞—Å—É—é—â–µ–≥–æ –∏–∑ –º–æ–¥–µ–ª–∏ ApprovedFunction.
    comment_text: —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–ª –∑–∞—è–≤–∫—É
    –∏ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
    comment_username: username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
    –ò–∑ –º–æ–¥–µ–ª–∏ ApprovedFunction –±–µ—Ä–µ—Ç—Å—è –ø–æ–ª–µ user_name
    """
    
    accountant_job = Payers.objects.get(name='–ë—É—Ö–≥–∞–ª—Ç–µ—Ä')
    accountants = ApprovedFunction.objects.filter(job_title=accountant_job.pk)
    creator = ApprovedFunction.objects.get(user_name=payment_creator)
    payment = Payments.objects.get(id=payment_id)
    if payment.payment_method.pk == 1:
        pay_with_method = PayWithCheckingAccount.objects.get(payment_id=payment.pk)
    elif payment.payment_method.pk == 2:
        pay_with_method = PayWithCard.objects.get(payment_id=payment.pk)
    elif payment.payment_method.pk == 3:
        pay_with_method = TransferToCard.objects.get(payment_id=payment.pk)
    elif payment.payment_method.pk == 4:
        pay_with_method = CashPayment.objects.get(payment_id=payment.pk)

    if creator_user_rating < 10 and creator.job_title != '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä':
        approve_process(payment_id, payment_creator, creator_user_rating, comment_text, comment_username)
    else:

        messages = TelegramMessageActions.objects.filter(
            payment=Payments.objects.get(id=payment_id),
            message_type='create_approve'
        ).values_list('chat_id', 'message_id', 'message', 'reply_markup', 'attach')

        for message in messages:
            chat_id_cicle =  message[0]
            message_id_cicle = message[1]
            current_text = message[2]
            reply_markup = json.loads(message[3].replace("'", "\""))
            attach = message[4]
            words = current_text.split("–°—Ç–∞—Ç—É—Å:")
            new_text = words[0] + '–°—Ç–∞—Ç—É—Å: üí≤–û–ø–ª–∞—Ç–∞'
            if attach == True:
                bot.edit_message_caption(caption=new_text, chat_id=chat_id_cicle, reply_markup=reply_markup, message_id=message_id_cicle, parse_mode='Markdown')
            else:
                bot.edit_message_text(text=new_text, chat_id=chat_id_cicle, reply_markup=reply_markup, message_id=message_id_cicle, parse_mode='Markdown')

        for accountant in accountants:
            keyboard = [[InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'–û—Ç–∫–ª–æ–Ω–∏—Ç—å {payment_id} {accountant} {payment_creator}'),
                        InlineKeyboardButton("–í —Ä–∞–±–æ—Ç–µ", callback_data=f'–í—Ä–∞–±–æ—Ç–µ {payment_id} {accountant} {payment_creator}'),
                        InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω–æ", callback_data=f'–û–ø–ª–∞—Ç–∏—Ç—å {payment_id} {accountant} {payment_creator}')]]

            reply_markup = InlineKeyboardMarkup(keyboard)
            message = message_constructor(accountant, creator, payment_id, payment, payment.payment_method.pk, pay_with_method, comment_text, comment_username)
            if payment.payment_method.pk == 1:
                file_path = os.path.join(os.getcwd(), 'media/' f'{pay_with_method.file_of_bill}')
                with open(file_path, 'rb') as f:
                    message_obj = bot.send_document(
                        chat_id=int(accountant.chat_id_tg),
                        document=f,
                        reply_markup=reply_markup,
                        caption=message,
                        parse_mode='Markdown')
                    save_message_function(payment, accountant.chat_id_tg,
                        message_obj.message_id, 'create_approve',
                        accountant.user_name, message, reply_markup, True)
            else:
                message_obj = bot.send_message(
                    chat_id=int(accountant.chat_id_tg),
                    reply_markup=reply_markup,
                    text=message,
                    parse_mode='Markdown')
                save_message_function(payment, accountant.chat_id_tg,
                    message_obj.message_id, 'create_approve',
                    accountant.user_name, message, reply_markup, False)
